using System.Linq;
using Content.Shared.Backmen.Silicons.Borgs;
using Content.Shared.Silicons.Borgs;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Backmen.Silicon.UI;

[GenerateTypedNameReferences]
public partial class ChassisSpriteSelection : Control
{
    public new event Action? SubtypeSelected;

    [Dependency] private readonly IPrototypeManager _prototype = default!;
    public BorgSubtypePrototype? SelectedBorgSubtype;

    public ChassisSpriteSelection()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }

    public void FillContainer(BorgTypePrototype parentPrototype)
    {
        OptionsContainer.RemoveAllChildren();

        var group = new ButtonGroup();

        MainContainer.Visible = true;

        var subtypes = _prototype
            .EnumeratePrototypes<BorgSubtypePrototype>()
            .Where(s => s.ParentBorgType == parentPrototype)
            .ToList();

        if (subtypes.Count == 0)
        {
            var label = new Label
            {
                Text = Loc.GetString("borg-no-subtypes-available")
            };
            OptionsContainer.AddChild(label);
            return;
        }

        foreach (var borgSubtype in subtypes)
        {
            var button = new Button();
            button.Group = group;
            button.OnPressed += _ =>
            {
                SelectedBorgSubtype = borgSubtype;
                SubtypeSelected?.Invoke();
            };

            var entPrototypeView = new EntityPrototypeView();

            entPrototypeView.SetPrototype(borgSubtype.DummyPrototype);
            entPrototypeView.Scale *= 2;

            button.AddChild(entPrototypeView);
            OptionsContainer.AddChild(button);
        }
    }
}
